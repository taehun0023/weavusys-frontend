{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from\"react\";// 로그인 상태와 관련된 데이터를 관리할 Context 생성\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>useContext(AuthContext);export const AuthProvider=_ref=>{let{children}=_ref;const[isLoggedIn,setIsLoggedIn]=useState(false);const[token,setToken]=useState(null);// token 상태 추가\nuseEffect(()=>{const savedToken=localStorage.getItem(\"token\");if(savedToken){setIsLoggedIn(true);setToken(savedToken);}},[]);const login=newToken=>{setIsLoggedIn(true);setToken(newToken);localStorage.setItem(\"token\",newToken);// 토큰 저장\n};const logout=()=>{setIsLoggedIn(false);setToken(null);localStorage.removeItem(\"token\");// 토큰 삭제\n};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{isLoggedIn,token,login,logout},children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","AuthContext","useAuth","AuthProvider","_ref","children","isLoggedIn","setIsLoggedIn","token","setToken","savedToken","localStorage","getItem","login","newToken","setItem","logout","removeItem","Provider","value"],"sources":["C:/Users/user/Desktop/react/src/config/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\n\r\n// 로그인 상태와 관련된 데이터를 관리할 Context 생성\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [token, setToken] = useState(null); // token 상태 추가\r\n\r\n  useEffect(() => {\r\n    const savedToken = localStorage.getItem(\"token\");\r\n    if (savedToken) {\r\n      setIsLoggedIn(true);\r\n      setToken(savedToken);\r\n    }\r\n  }, []);\r\n\r\n  const login = (newToken) => {\r\n    setIsLoggedIn(true);\r\n    setToken(newToken);\r\n    localStorage.setItem(\"token\", newToken); // 토큰 저장\r\n  };\r\n\r\n  const logout = () => {\r\n    setIsLoggedIn(false);\r\n    setToken(null);\r\n    localStorage.removeItem(\"token\"); // 토큰 삭제\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isLoggedIn, token, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAE7E;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,WAAW,cAAGN,aAAa,CAAC,CAAC,CAEnC,MAAO,MAAM,CAAAO,OAAO,CAAGA,CAAA,GAAMN,UAAU,CAACK,WAAW,CAAC,CAEpD,MAAO,MAAM,CAAAE,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,UAAU,CAAEC,aAAa,CAAC,CAAGV,QAAQ,CAAC,KAAK,CAAC,CACnD,KAAM,CAACW,KAAK,CAAEC,QAAQ,CAAC,CAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAE;AAE1CC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAY,UAAU,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAChD,GAAIF,UAAU,CAAE,CACdH,aAAa,CAAC,IAAI,CAAC,CACnBE,QAAQ,CAACC,UAAU,CAAC,CACtB,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAG,KAAK,CAAIC,QAAQ,EAAK,CAC1BP,aAAa,CAAC,IAAI,CAAC,CACnBE,QAAQ,CAACK,QAAQ,CAAC,CAClBH,YAAY,CAACI,OAAO,CAAC,OAAO,CAAED,QAAQ,CAAC,CAAE;AAC3C,CAAC,CAED,KAAM,CAAAE,MAAM,CAAGA,CAAA,GAAM,CACnBT,aAAa,CAAC,KAAK,CAAC,CACpBE,QAAQ,CAAC,IAAI,CAAC,CACdE,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC,CAAE;AACpC,CAAC,CAED,mBACEjB,IAAA,CAACC,WAAW,CAACiB,QAAQ,EAACC,KAAK,CAAE,CAAEb,UAAU,CAAEE,KAAK,CAAEK,KAAK,CAAEG,MAAO,CAAE,CAAAX,QAAA,CAC/DA,QAAQ,CACW,CAAC,CAE3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}