{"ast":null,"code":"// useFetchAccual.js\nimport{useState,useEffect}from\"react\";import createAxiosInstance from\"../config/api\";export function useFetchAccual(){const[userData,setUserData]=useState([]);// 유저 정보\nconst[error,setError]=useState(\"\");// 에러 메시지\nconst[loading,setLoading]=useState(false);// 로딩 상태\nuseEffect(()=>{const fetchData=async()=>{setLoading(true);// 로딩 시작\ntry{const axiosInstance=createAxiosInstance();const response=await axiosInstance.get(\"/employees/accrual\");setUserData(response.data);}catch(error){if(error.response){console.error(\"서버 에러:\",error.response.status,error.response.data);setError(\"서버 오류가 발생했습니다.\");}else if(error.request){console.error(\"응답 없음:\",error.request);setError(\"서버로부터 응답이 없습니다.\");}else{console.error(\"요청 설정 에러:\",error.message);setError(\"요청에 문제가 발생했습니다.\");}}finally{setLoading(false);// 로딩 종료\n}};fetchData();},[]);// 컴포넌트가 마운트될 때 한 번만 호출\nreturn{userData,error,loading};}","map":{"version":3,"names":["useState","useEffect","createAxiosInstance","useFetchAccual","userData","setUserData","error","setError","loading","setLoading","fetchData","axiosInstance","response","get","data","console","status","request","message"],"sources":["C:/Users/user/Desktop/react/src/utils/useFetchAccual.js"],"sourcesContent":["// useFetchAccual.js\r\nimport { useState, useEffect } from \"react\";\r\nimport createAxiosInstance from \"../config/api\";\r\n\r\nexport function useFetchAccual() {\r\n  const [userData, setUserData] = useState([]); // 유저 정보\r\n  const [error, setError] = useState(\"\"); // 에러 메시지\r\n  const [loading, setLoading] = useState(false); // 로딩 상태\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true); // 로딩 시작\r\n      try {\r\n        const axiosInstance = createAxiosInstance();\r\n        const response = await axiosInstance.get(\"/employees/accrual\");\r\n        setUserData(response.data);\r\n      } catch (error) {\r\n        if (error.response) {\r\n          console.error(\r\n            \"서버 에러:\",\r\n            error.response.status,\r\n            error.response.data\r\n          );\r\n          setError(\"서버 오류가 발생했습니다.\");\r\n        } else if (error.request) {\r\n          console.error(\"응답 없음:\", error.request);\r\n          setError(\"서버로부터 응답이 없습니다.\");\r\n        } else {\r\n          console.error(\"요청 설정 에러:\", error.message);\r\n          setError(\"요청에 문제가 발생했습니다.\");\r\n        }\r\n      } finally {\r\n        setLoading(false); // 로딩 종료\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []); // 컴포넌트가 마운트될 때 한 번만 호출\r\n\r\n  return {\r\n    userData,\r\n    error,\r\n    loading,\r\n  };\r\n}\r\n"],"mappings":"AAAA;AACA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,MAAO,CAAAC,mBAAmB,KAAM,eAAe,CAE/C,MAAO,SAAS,CAAAC,cAAcA,CAAA,CAAG,CAC/B,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGL,QAAQ,CAAC,EAAE,CAAC,CAAE;AAC9C,KAAM,CAACM,KAAK,CAAEC,QAAQ,CAAC,CAAGP,QAAQ,CAAC,EAAE,CAAC,CAAE;AACxC,KAAM,CAACQ,OAAO,CAAEC,UAAU,CAAC,CAAGT,QAAQ,CAAC,KAAK,CAAC,CAAE;AAE/CC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAS,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5BD,UAAU,CAAC,IAAI,CAAC,CAAE;AAClB,GAAI,CACF,KAAM,CAAAE,aAAa,CAAGT,mBAAmB,CAAC,CAAC,CAC3C,KAAM,CAAAU,QAAQ,CAAG,KAAM,CAAAD,aAAa,CAACE,GAAG,CAAC,oBAAoB,CAAC,CAC9DR,WAAW,CAACO,QAAQ,CAACE,IAAI,CAAC,CAC5B,CAAE,MAAOR,KAAK,CAAE,CACd,GAAIA,KAAK,CAACM,QAAQ,CAAE,CAClBG,OAAO,CAACT,KAAK,CACX,QAAQ,CACRA,KAAK,CAACM,QAAQ,CAACI,MAAM,CACrBV,KAAK,CAACM,QAAQ,CAACE,IACjB,CAAC,CACDP,QAAQ,CAAC,gBAAgB,CAAC,CAC5B,CAAC,IAAM,IAAID,KAAK,CAACW,OAAO,CAAE,CACxBF,OAAO,CAACT,KAAK,CAAC,QAAQ,CAAEA,KAAK,CAACW,OAAO,CAAC,CACtCV,QAAQ,CAAC,iBAAiB,CAAC,CAC7B,CAAC,IAAM,CACLQ,OAAO,CAACT,KAAK,CAAC,WAAW,CAAEA,KAAK,CAACY,OAAO,CAAC,CACzCX,QAAQ,CAAC,iBAAiB,CAAC,CAC7B,CACF,CAAC,OAAS,CACRE,UAAU,CAAC,KAAK,CAAC,CAAE;AACrB,CACF,CAAC,CAEDC,SAAS,CAAC,CAAC,CACb,CAAC,CAAE,EAAE,CAAC,CAAE;AAER,MAAO,CACLN,QAAQ,CACRE,KAAK,CACLE,OACF,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}