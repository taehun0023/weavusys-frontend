{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport createAxiosInstance from \"../../config/api\";\nexport function useFetchYearData(year) {\n  _s();\n  const [error, setError] = useState(\"\"); // 에러 메시지\n  const [loading, setLoading] = useState(false); // 로딩 상태\n  const [totalAccumulatedAmount, setTotalAccumulatedAmount] = useState(0); // 총 적립 금액\n\n  const fetchDataByYear = async year => {\n    setError(null); // 기존 에러 초기화\n    if (!year || isNaN(year)) {\n      setError(\"유효한 연도를 입력하세요.\");\n      return;\n    }\n    setLoading(true); // 로딩 시작\n    // 연도별 적립 데이터 요청\n    try {\n      const axiosInstance = createAxiosInstance(); // 인스턴스 생성\n      const response = await axiosInstance.get(\"/employees/accruals/year/\".concat(year));\n      setTotalAccumulatedAmount(response.data); // 총 적립 금액 저장\n    } catch (error) {\n      if (error.response) {\n        console.error(\"서버 에러:\", error.response.status, error.response.data);\n        setError(\"서버 오류가 발생했습니다.\");\n      } else if (error.request) {\n        console.error(\"응답 없음:\", error.request);\n        setError(\"서버로부터 응답이 없습니다.\");\n      } else {\n        console.error(\"요청 설정 에러:\", error.message);\n        setError(\"요청에 문제가 발생했습니다.\");\n      }\n    } finally {\n      setLoading(false); // 로딩 종료\n    }\n  };\n  return {\n    error,\n    loading,\n    totalAccumulatedAmount,\n    fetchDataByYear\n  };\n}\n_s(useFetchYearData, \"f+2arxi9Yne++e4LGOwJfCIluzc=\");","map":{"version":3,"names":["useState","createAxiosInstance","useFetchYearData","year","_s","error","setError","loading","setLoading","totalAccumulatedAmount","setTotalAccumulatedAmount","fetchDataByYear","isNaN","axiosInstance","response","get","concat","data","console","status","request","message"],"sources":["C:/Users/user/Desktop/react/src/calcul/utils/useFetchYearData.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport createAxiosInstance from \"../../config/api\";\r\n\r\nexport function useFetchYearData(year) {\r\n  const [error, setError] = useState(\"\"); // 에러 메시지\r\n  const [loading, setLoading] = useState(false); // 로딩 상태\r\n  const [totalAccumulatedAmount, setTotalAccumulatedAmount] = useState(0); // 총 적립 금액\r\n\r\n  const fetchDataByYear = async (year) => {\r\n    setError(null); // 기존 에러 초기화\r\n    if (!year || isNaN(year)) {\r\n      setError(\"유효한 연도를 입력하세요.\");\r\n      return;\r\n    }\r\n    setLoading(true); // 로딩 시작\r\n    // 연도별 적립 데이터 요청\r\n    try {\r\n      const axiosInstance = createAxiosInstance(); // 인스턴스 생성\r\n      const response = await axiosInstance.get(\r\n        `/employees/accruals/year/${year}`\r\n      );\r\n\r\n      setTotalAccumulatedAmount(response.data); // 총 적립 금액 저장\r\n    } catch (error) {\r\n      if (error.response) {\r\n        console.error(\"서버 에러:\", error.response.status, error.response.data);\r\n        setError(\"서버 오류가 발생했습니다.\");\r\n      } else if (error.request) {\r\n        console.error(\"응답 없음:\", error.request);\r\n        setError(\"서버로부터 응답이 없습니다.\");\r\n      } else {\r\n        console.error(\"요청 설정 에러:\", error.message);\r\n        setError(\"요청에 문제가 발생했습니다.\");\r\n      }\r\n    } finally {\r\n      setLoading(false); // 로딩 종료\r\n    }\r\n  };\r\n\r\n  return {\r\n    error,\r\n    loading,\r\n    totalAccumulatedAmount,\r\n    fetchDataByYear,\r\n  };\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,mBAAmB,MAAM,kBAAkB;AAElD,OAAO,SAASC,gBAAgBA,CAACC,IAAI,EAAE;EAAAC,EAAA;EACrC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACS,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEzE,MAAMW,eAAe,GAAG,MAAOR,IAAI,IAAK;IACtCG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IAChB,IAAI,CAACH,IAAI,IAAIS,KAAK,CAACT,IAAI,CAAC,EAAE;MACxBG,QAAQ,CAAC,gBAAgB,CAAC;MAC1B;IACF;IACAE,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;IAClB;IACA,IAAI;MACF,MAAMK,aAAa,GAAGZ,mBAAmB,CAAC,CAAC,CAAC,CAAC;MAC7C,MAAMa,QAAQ,GAAG,MAAMD,aAAa,CAACE,GAAG,6BAAAC,MAAA,CACVb,IAAI,CAClC,CAAC;MAEDO,yBAAyB,CAACI,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC;IAC5C,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACd,IAAIA,KAAK,CAACS,QAAQ,EAAE;QAClBI,OAAO,CAACb,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAACS,QAAQ,CAACK,MAAM,EAAEd,KAAK,CAACS,QAAQ,CAACG,IAAI,CAAC;QACnEX,QAAQ,CAAC,gBAAgB,CAAC;MAC5B,CAAC,MAAM,IAAID,KAAK,CAACe,OAAO,EAAE;QACxBF,OAAO,CAACb,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAACe,OAAO,CAAC;QACtCd,QAAQ,CAAC,iBAAiB,CAAC;MAC7B,CAAC,MAAM;QACLY,OAAO,CAACb,KAAK,CAAC,WAAW,EAAEA,KAAK,CAACgB,OAAO,CAAC;QACzCf,QAAQ,CAAC,iBAAiB,CAAC;MAC7B;IACF,CAAC,SAAS;MACRE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACrB;EACF,CAAC;EAED,OAAO;IACLH,KAAK;IACLE,OAAO;IACPE,sBAAsB;IACtBE;EACF,CAAC;AACH;AAACP,EAAA,CA1CeF,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}