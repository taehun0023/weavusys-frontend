{"ast":null,"code":"import{useState}from\"react\";import createAxiosInstance from\"../../config/api\";export function useFetchYearData(year){const[error,setError]=useState(\"\");// 에러 메시지\nconst[loading,setLoading]=useState(false);// 로딩 상태\nconst[totalAccumulatedAmount,setTotalAccumulatedAmount]=useState(0);// 총 적립 금액\nconst fetchDataByYear=async year=>{setError(null);// 기존 에러 초기화\nif(!year||isNaN(year)){setError(\"유효한 연도를 입력하세요.\");return;}setLoading(true);// 로딩 시작\n// 연도별 적립 데이터 요청\ntry{const axiosInstance=createAxiosInstance();// 인스턴스 생성\nconst response=await axiosInstance.get(\"/employees/accruals/year/\".concat(year));setTotalAccumulatedAmount(response.data);// 총 적립 금액 저장\n}catch(error){if(error.response){console.error(\"서버 에러:\",error.response.status,error.response.data);setError(\"서버 오류가 발생했습니다.\");}else if(error.request){console.error(\"응답 없음:\",error.request);setError(\"서버로부터 응답이 없습니다.\");}else{console.error(\"요청 설정 에러:\",error.message);setError(\"요청에 문제가 발생했습니다.\");}}finally{setLoading(false);// 로딩 종료\n}};return{error,loading,totalAccumulatedAmount,fetchDataByYear};}","map":{"version":3,"names":["useState","createAxiosInstance","useFetchYearData","year","error","setError","loading","setLoading","totalAccumulatedAmount","setTotalAccumulatedAmount","fetchDataByYear","isNaN","axiosInstance","response","get","concat","data","console","status","request","message"],"sources":["C:/Users/user/Desktop/react/src/calcul/utils/useFetchYearData.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport createAxiosInstance from \"../../config/api\";\r\n\r\nexport function useFetchYearData(year) {\r\n  const [error, setError] = useState(\"\"); // 에러 메시지\r\n  const [loading, setLoading] = useState(false); // 로딩 상태\r\n  const [totalAccumulatedAmount, setTotalAccumulatedAmount] = useState(0); // 총 적립 금액\r\n\r\n  const fetchDataByYear = async (year) => {\r\n    setError(null); // 기존 에러 초기화\r\n    if (!year || isNaN(year)) {\r\n      setError(\"유효한 연도를 입력하세요.\");\r\n      return;\r\n    }\r\n    setLoading(true); // 로딩 시작\r\n    // 연도별 적립 데이터 요청\r\n    try {\r\n      const axiosInstance = createAxiosInstance(); // 인스턴스 생성\r\n      const response = await axiosInstance.get(\r\n        `/employees/accruals/year/${year}`\r\n      );\r\n\r\n      setTotalAccumulatedAmount(response.data); // 총 적립 금액 저장\r\n    } catch (error) {\r\n      if (error.response) {\r\n        console.error(\"서버 에러:\", error.response.status, error.response.data);\r\n        setError(\"서버 오류가 발생했습니다.\");\r\n      } else if (error.request) {\r\n        console.error(\"응답 없음:\", error.request);\r\n        setError(\"서버로부터 응답이 없습니다.\");\r\n      } else {\r\n        console.error(\"요청 설정 에러:\", error.message);\r\n        setError(\"요청에 문제가 발생했습니다.\");\r\n      }\r\n    } finally {\r\n      setLoading(false); // 로딩 종료\r\n    }\r\n  };\r\n\r\n  return {\r\n    error,\r\n    loading,\r\n    totalAccumulatedAmount,\r\n    fetchDataByYear,\r\n  };\r\n}\r\n"],"mappings":"AAAA,OAASA,QAAQ,KAAQ,OAAO,CAChC,MAAO,CAAAC,mBAAmB,KAAM,kBAAkB,CAElD,MAAO,SAAS,CAAAC,gBAAgBA,CAACC,IAAI,CAAE,CACrC,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGL,QAAQ,CAAC,EAAE,CAAC,CAAE;AACxC,KAAM,CAACM,OAAO,CAAEC,UAAU,CAAC,CAAGP,QAAQ,CAAC,KAAK,CAAC,CAAE;AAC/C,KAAM,CAACQ,sBAAsB,CAAEC,yBAAyB,CAAC,CAAGT,QAAQ,CAAC,CAAC,CAAC,CAAE;AAEzE,KAAM,CAAAU,eAAe,CAAG,KAAO,CAAAP,IAAI,EAAK,CACtCE,QAAQ,CAAC,IAAI,CAAC,CAAE;AAChB,GAAI,CAACF,IAAI,EAAIQ,KAAK,CAACR,IAAI,CAAC,CAAE,CACxBE,QAAQ,CAAC,gBAAgB,CAAC,CAC1B,OACF,CACAE,UAAU,CAAC,IAAI,CAAC,CAAE;AAClB;AACA,GAAI,CACF,KAAM,CAAAK,aAAa,CAAGX,mBAAmB,CAAC,CAAC,CAAE;AAC7C,KAAM,CAAAY,QAAQ,CAAG,KAAM,CAAAD,aAAa,CAACE,GAAG,6BAAAC,MAAA,CACVZ,IAAI,CAClC,CAAC,CAEDM,yBAAyB,CAACI,QAAQ,CAACG,IAAI,CAAC,CAAE;AAC5C,CAAE,MAAOZ,KAAK,CAAE,CACd,GAAIA,KAAK,CAACS,QAAQ,CAAE,CAClBI,OAAO,CAACb,KAAK,CAAC,QAAQ,CAAEA,KAAK,CAACS,QAAQ,CAACK,MAAM,CAAEd,KAAK,CAACS,QAAQ,CAACG,IAAI,CAAC,CACnEX,QAAQ,CAAC,gBAAgB,CAAC,CAC5B,CAAC,IAAM,IAAID,KAAK,CAACe,OAAO,CAAE,CACxBF,OAAO,CAACb,KAAK,CAAC,QAAQ,CAAEA,KAAK,CAACe,OAAO,CAAC,CACtCd,QAAQ,CAAC,iBAAiB,CAAC,CAC7B,CAAC,IAAM,CACLY,OAAO,CAACb,KAAK,CAAC,WAAW,CAAEA,KAAK,CAACgB,OAAO,CAAC,CACzCf,QAAQ,CAAC,iBAAiB,CAAC,CAC7B,CACF,CAAC,OAAS,CACRE,UAAU,CAAC,KAAK,CAAC,CAAE;AACrB,CACF,CAAC,CAED,MAAO,CACLH,KAAK,CACLE,OAAO,CACPE,sBAAsB,CACtBE,eACF,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}