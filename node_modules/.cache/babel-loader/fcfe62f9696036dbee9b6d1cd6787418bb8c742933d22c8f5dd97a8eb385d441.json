{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport createAxiosInstance from \"../config/api\";\nexport function EmployeeRegiApi() {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [responseMessage, setResponseMessage] = useState(\"\");\n  const addEmployee = async employeeData => {\n    setLoading(true);\n    setError(\"\");\n    setResponseMessage(\"\"); // 상태 초기화\n\n    try {\n      const axiosInstance = createAxiosInstance(); // 인스턴스 생성\n      const response = await axiosInstance.post(\"/employees\", employeeData);\n      // 응답 데이터 설정\n      setResponseMessage(response.data);\n    } catch (err) {\n      if (err.response) {\n        setError('등록 실패 : ${err.response.data.message || \"서버 오류\"}');\n      } else if (err.request) {\n        setError(\"등록 실패: 서버로부터 응답이 없습니다.\" + err.request);\n      } else {\n        setError(\"등록 실패 : ${err.message}\");\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    addEmployee,\n    loading,\n    error,\n    responseMessage\n  };\n}\n_s(EmployeeRegiApi, \"tHYyiKage/2/D+P5HSSIOFoS2tQ=\");\n_c = EmployeeRegiApi;\nvar _c;\n$RefreshReg$(_c, \"EmployeeRegiApi\");","map":{"version":3,"names":["useState","createAxiosInstance","EmployeeRegiApi","_s","loading","setLoading","error","setError","responseMessage","setResponseMessage","addEmployee","employeeData","axiosInstance","response","post","data","err","request","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/react/src/utils/EmployeeRegiApi.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport createAxiosInstance from \"../config/api\";\r\n\r\nexport function EmployeeRegiApi() {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [responseMessage, setResponseMessage] = useState(\"\");\r\n\r\n  const addEmployee = async (employeeData) => {\r\n    setLoading(true);\r\n    setError(\"\");\r\n    setResponseMessage(\"\"); // 상태 초기화\r\n\r\n    try {\r\n      const axiosInstance = createAxiosInstance(); // 인스턴스 생성\r\n      const response = await axiosInstance.post(\"/employees\", employeeData);\r\n      // 응답 데이터 설정\r\n      setResponseMessage(response.data);\r\n    } catch (err) {\r\n      if (err.response) {\r\n        setError('등록 실패 : ${err.response.data.message || \"서버 오류\"}');\r\n      } else if (err.request) {\r\n        setError(\"등록 실패: 서버로부터 응답이 없습니다.\" + err.request);\r\n      } else {\r\n        setError(\"등록 실패 : ${err.message}\");\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return { addEmployee, loading, error, responseMessage };\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,mBAAmB,MAAM,eAAe;AAE/C,OAAO,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EAChC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE1D,MAAMU,WAAW,GAAG,MAAOC,YAAY,IAAK;IAC1CN,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,EAAE,CAAC;IACZE,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;;IAExB,IAAI;MACF,MAAMG,aAAa,GAAGX,mBAAmB,CAAC,CAAC,CAAC,CAAC;MAC7C,MAAMY,QAAQ,GAAG,MAAMD,aAAa,CAACE,IAAI,CAAC,YAAY,EAAEH,YAAY,CAAC;MACrE;MACAF,kBAAkB,CAACI,QAAQ,CAACE,IAAI,CAAC;IACnC,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ,IAAIA,GAAG,CAACH,QAAQ,EAAE;QAChBN,QAAQ,CAAC,iDAAiD,CAAC;MAC7D,CAAC,MAAM,IAAIS,GAAG,CAACC,OAAO,EAAE;QACtBV,QAAQ,CAAC,wBAAwB,GAAGS,GAAG,CAACC,OAAO,CAAC;MAClD,CAAC,MAAM;QACLV,QAAQ,CAAC,wBAAwB,CAAC;MACpC;IACF,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,OAAO;IAAEK,WAAW;IAAEN,OAAO;IAAEE,KAAK;IAAEE;EAAgB,CAAC;AACzD;AAACL,EAAA,CA7BeD,eAAe;AAAAgB,EAAA,GAAfhB,eAAe;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}