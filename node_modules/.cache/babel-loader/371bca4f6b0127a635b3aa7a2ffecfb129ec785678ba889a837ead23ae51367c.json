{"ast":null,"code":"var _s = $RefreshSig$();\n// useFetchAccual.js\nimport { useState, useEffect } from \"react\";\nimport createAxiosInstance from \"../../config/api\";\nexport function useFetchAccual() {\n  _s();\n  const [userData, setUserData] = useState([]); // 유저 정보\n  const [error, setError] = useState(\"\"); // 에러 메시지\n  const [loading, setLoading] = useState(false); // 로딩 상태\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true); // 로딩 시작\n      try {\n        const axiosInstance = createAxiosInstance();\n        const response = await axiosInstance.get(\"/employees/accrual\");\n        const sortedData = response.data.sort((a, b) => {\n          const dateA = new Date(a.entryDate); // entryDate를 Date 객체로 변환\n          const dateB = new Date(b.entryDate);\n          return dateA - dateB; // 오름차순 정렬 (날짜가 오래된 순)\n        });\n        setUserData(response.data);\n      } catch (error) {\n        if (error.response) {\n          console.error(\"서버 에러:\", error.response.status, error.response.data);\n          setError(\"서버 오류가 발생했습니다.\");\n        } else if (error.request) {\n          console.error(\"응답 없음:\", error.request);\n          setError(\"서버로부터 응답이 없습니다.\");\n        } else {\n          console.error(\"요청 설정 에러:\", error.message);\n          setError(\"요청에 문제가 발생했습니다.\");\n        }\n      } finally {\n        setLoading(false); // 로딩 종료\n      }\n    };\n    fetchData();\n  }, []); // 컴포넌트가 마운트될 때 한 번만 호출\n\n  return {\n    userData,\n    error,\n    loading\n  };\n}\n_s(useFetchAccual, \"rDozz/RtyKGFUT2TjxGyglsrM1Q=\");","map":{"version":3,"names":["useState","useEffect","createAxiosInstance","useFetchAccual","_s","userData","setUserData","error","setError","loading","setLoading","fetchData","axiosInstance","response","get","sortedData","data","sort","a","b","dateA","Date","entryDate","dateB","console","status","request","message"],"sources":["C:/Users/user/Desktop/react/src/calcul/utils/useFetchAccual.js"],"sourcesContent":["// useFetchAccual.js\r\nimport { useState, useEffect } from \"react\";\r\nimport createAxiosInstance from \"../../config/api\";\r\n\r\nexport function useFetchAccual() {\r\n  const [userData, setUserData] = useState([]); // 유저 정보\r\n  const [error, setError] = useState(\"\"); // 에러 메시지\r\n  const [loading, setLoading] = useState(false); // 로딩 상태\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true); // 로딩 시작\r\n      try {\r\n        const axiosInstance = createAxiosInstance();\r\n        const response = await axiosInstance.get(\"/employees/accrual\");\r\n        const sortedData = response.data.sort((a, b) => {\r\n          const dateA = new Date(a.entryDate); // entryDate를 Date 객체로 변환\r\n          const dateB = new Date(b.entryDate);\r\n          return dateA - dateB; // 오름차순 정렬 (날짜가 오래된 순)\r\n        });\r\n        setUserData(response.data);\r\n      } catch (error) {\r\n        if (error.response) {\r\n          console.error(\r\n            \"서버 에러:\",\r\n            error.response.status,\r\n            error.response.data\r\n          );\r\n          setError(\"서버 오류가 발생했습니다.\");\r\n        } else if (error.request) {\r\n          console.error(\"응답 없음:\", error.request);\r\n          setError(\"서버로부터 응답이 없습니다.\");\r\n        } else {\r\n          console.error(\"요청 설정 에러:\", error.message);\r\n          setError(\"요청에 문제가 발생했습니다.\");\r\n        }\r\n      } finally {\r\n        setLoading(false); // 로딩 종료\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []); // 컴포넌트가 마운트될 때 한 번만 호출\r\n\r\n  return {\r\n    userData,\r\n    error,\r\n    loading,\r\n  };\r\n}\r\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,mBAAmB,MAAM,kBAAkB;AAElD,OAAO,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EAC/B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE/CC,SAAS,CAAC,MAAM;IACd,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5BD,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;MAClB,IAAI;QACF,MAAME,aAAa,GAAGV,mBAAmB,CAAC,CAAC;QAC3C,MAAMW,QAAQ,GAAG,MAAMD,aAAa,CAACE,GAAG,CAAC,oBAAoB,CAAC;QAC9D,MAAMC,UAAU,GAAGF,QAAQ,CAACG,IAAI,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UAC9C,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAACH,CAAC,CAACI,SAAS,CAAC,CAAC,CAAC;UACrC,MAAMC,KAAK,GAAG,IAAIF,IAAI,CAACF,CAAC,CAACG,SAAS,CAAC;UACnC,OAAOF,KAAK,GAAGG,KAAK,CAAC,CAAC;QACxB,CAAC,CAAC;QACFjB,WAAW,CAACO,QAAQ,CAACG,IAAI,CAAC;MAC5B,CAAC,CAAC,OAAOT,KAAK,EAAE;QACd,IAAIA,KAAK,CAACM,QAAQ,EAAE;UAClBW,OAAO,CAACjB,KAAK,CACX,QAAQ,EACRA,KAAK,CAACM,QAAQ,CAACY,MAAM,EACrBlB,KAAK,CAACM,QAAQ,CAACG,IACjB,CAAC;UACDR,QAAQ,CAAC,gBAAgB,CAAC;QAC5B,CAAC,MAAM,IAAID,KAAK,CAACmB,OAAO,EAAE;UACxBF,OAAO,CAACjB,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAACmB,OAAO,CAAC;UACtClB,QAAQ,CAAC,iBAAiB,CAAC;QAC7B,CAAC,MAAM;UACLgB,OAAO,CAACjB,KAAK,CAAC,WAAW,EAAEA,KAAK,CAACoB,OAAO,CAAC;UACzCnB,QAAQ,CAAC,iBAAiB,CAAC;QAC7B;MACF,CAAC,SAAS;QACRE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB;IACF,CAAC;IAEDC,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,OAAO;IACLN,QAAQ;IACRE,KAAK;IACLE;EACF,CAAC;AACH;AAACL,EAAA,CA7CeD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}