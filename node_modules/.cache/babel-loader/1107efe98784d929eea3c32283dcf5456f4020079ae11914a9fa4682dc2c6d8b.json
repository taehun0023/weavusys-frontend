{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\react\\\\src\\\\config\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\n\n// 로그인 상태와 관련된 데이터를 관리할 Context 생성\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({\n  isLoggedIn: false,\n  token: null,\n  login: () => {},\n  logout: () => {}\n});\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = _ref => {\n  _s2();\n  let {\n    children\n  } = _ref;\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [token, setToken] = useState(null); // token 상태 추가\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const savedToken = localStorage.getItem(\"token\");\n    if (savedToken) {\n      setIsLoggedIn(true);\n      setToken(savedToken);\n    }\n    setLoading(false);\n  }, []);\n  const login = newToken => {\n    const expirationTime = new Date().getTime() + 3600 * 1000; // 1시간 후\n    localStorage.setItem(\"token\", newToken); // 토큰 저장\n    localStorage.setItem(\"expirationTime\", expirationTime);\n    setIsLoggedIn(true);\n    setToken(newToken);\n  };\n  const logout = () => {\n    setIsLoggedIn(false);\n    setToken(null);\n    localStorage.removeItem(\"token\"); // 토큰 삭제\n    localStorage.removeItem(\"expirationTime\"); // 만료 시간 삭제\n  };\n  useEffect(() => {\n    const checkTokenExpiration = () => {\n      const expirationTime = localStorage.getItem(\"expirationTime\");\n      if (expirationTime) {\n        const timeLeft = parseInt(expirationTime, 10) - new Date().getTime();\n        if (timeLeft <= 0) {\n          logout();\n        } else {\n          setTimeout(logout, timeLeft); // 남은 시간만큼 대기 후 로그아웃\n        }\n      }\n    };\n    checkTokenExpiration(); // 초기 확인\n\n    return () => clearTimeout(); // 클린업\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 12\n    }, this); // 초기화 중 로딩 상태 표시\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      token,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 7\n  }, this);\n};\n_s2(AuthProvider, \"DnRkvqW+2mBzFbcBUuUSMybElEQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","isLoggedIn","token","login","logout","useAuth","_s","AuthProvider","_ref","_s2","children","setIsLoggedIn","setToken","loading","setLoading","savedToken","localStorage","getItem","newToken","expirationTime","Date","getTime","setItem","removeItem","checkTokenExpiration","timeLeft","parseInt","setTimeout","clearTimeout","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/react/src/config/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\n\r\n// 로그인 상태와 관련된 데이터를 관리할 Context 생성\r\nconst AuthContext = createContext({\r\n  isLoggedIn: false,\r\n  token: null,\r\n  login: () => {},\r\n  logout: () => {},\r\n});\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [token, setToken] = useState(null); // token 상태 추가\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const savedToken = localStorage.getItem(\"token\");\r\n    if (savedToken) {\r\n      setIsLoggedIn(true);\r\n      setToken(savedToken);\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = (newToken) => {\r\n    const expirationTime = new Date().getTime() + 3600 * 1000; // 1시간 후\r\n    localStorage.setItem(\"token\", newToken); // 토큰 저장\r\n    localStorage.setItem(\"expirationTime\", expirationTime);\r\n    setIsLoggedIn(true);\r\n    setToken(newToken);\r\n  };\r\n\r\n  const logout = () => {\r\n    setIsLoggedIn(false);\r\n    setToken(null);\r\n    localStorage.removeItem(\"token\"); // 토큰 삭제\r\n    localStorage.removeItem(\"expirationTime\"); // 만료 시간 삭제\r\n  };\r\n\r\n  useEffect(() => {\r\n    const checkTokenExpiration = () => {\r\n      const expirationTime = localStorage.getItem(\"expirationTime\");\r\n      if (expirationTime) {\r\n        const timeLeft = parseInt(expirationTime, 10) - new Date().getTime();\r\n        if (timeLeft <= 0) {\r\n          logout();\r\n        } else {\r\n          setTimeout(logout, timeLeft); // 남은 시간만큼 대기 후 로그아웃\r\n        }\r\n      }\r\n    };\r\n\r\n    checkTokenExpiration(); // 초기 확인\r\n\r\n    return () => clearTimeout(); // 클린업\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>; // 초기화 중 로딩 상태 표시\r\n  }\r\n\r\n  return (\r\n      <AuthContext.Provider value={{ isLoggedIn, token, login, logout }}>\r\n        {children}\r\n      </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}